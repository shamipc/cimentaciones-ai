import math
import numpy as np
import pandas as pd
import streamlit as st
import plotly.express as px

st.set_page_config(page_title="Optimizaci√≥n de Cimentaciones", layout="wide")

# ====== Estilos ======
st.markdown("""
<style>
h1 {font-size: 28px !important; margin-bottom: 0.4rem;}
h2 {font-size: 22px !important; margin-bottom: 0.4rem;}
h3 {font-size: 18px !important; margin-bottom: 0.3rem;}
section.main .block-container {padding-top: 1rem; padding-bottom: 1rem;}
</style>
""", unsafe_allow_html=True)

# ---------- Par√°metros iniciales ----------
DEFAULTS = dict(
    # Suelo
    gamma=18.0, c=25.0, phi=30.0, Es=15000.0, nu=0.30, nivel_freatico=2.0,
    # Cargas
    N=1000.0, Mx=0.0, My=0.0,
    # Materiales cimentaci√≥n
    fc=21.0, fy=420.0, recubrimiento=0.05,
    # Factores de seguridad y l√≠mites
    FS=2.5, asent_max=0.025,
    # Costos
    concreto_Sm3=650.0, acero_Skg=5.50, excav_Sm3=80.0, relleno_Sm3=50.0,
    # Geometr√≠a
    D=1.5, B_min=1.0, B_max=4.0, L_min=1.0, L_max=4.0, h_min=0.5, h_max=1.5,
    nB=20, nL=20, nh=10,
    modelo="Terzaghi"
)
for k, v in DEFAULTS.items():
    if k not in st.session_state:
        st.session_state[k] = v

# ---------- Propiedades de Suelos ----------
# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Par√°metros Geot√©cnicos", layout="wide")

# ---------- Propiedades de Suelos Mejoradas ----------
# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Par√°metros Geot√©cnicos Completos", layout="wide")

# Inicializaci√≥n de session_state con par√°metros completos y v√°lidos
def inicializar_parametros():
    parametros_base = {
        # === PROPIEDADES B√ÅSICAS DEL SUELO ===
        'gamma': 18.0,                    # Peso unitario natural (kN/m¬≥)
        'gamma_sat': 20.0,                # Peso unitario saturado (kN/m¬≥)
        'gamma_d': 16.0,                  # Peso unitario seco (kN/m¬≥)
        'c': 10.0,                        # Cohesi√≥n drenada (kPa)
        'phi': 30.0,                      # √Ångulo de fricci√≥n (¬∞)
        'cu': 25.0,                       # Cohesi√≥n no drenada (kPa)
        'su': 20.0,                       # Resistencia al corte no drenado (kPa)
        
        # === PROPIEDADES DE DEFORMABILIDAD ===
        'Es': 30000.0,                    # M√≥dulo de elasticidad del suelo (kPa)
        'Eu': 15000.0,                    # M√≥dulo no drenado (kPa)
        'nu': 0.35,                       # Coeficiente de Poisson
        'mv': 0.0001,                     # Coeficiente de compresibilidad (m¬≤/kN)
        'Cv': 5.0,                        # Coeficiente de consolidaci√≥n (m¬≤/a√±o)
        
        # === PROPIEDADES F√çSICAS E √çNDICE ===
        'w': 18.0,                        # Contenido de humedad natural (%)
        'w_sat': 22.0,                    # Contenido de humedad en saturaci√≥n (%)
        'Gs': 2.65,                       # Gravedad espec√≠fica de s√≥lidos
        'e': 0.65,                        # Relaci√≥n de vac√≠os
        'n': 0.39,                        # Porosidad
        'Sr': 75.0,                       # Grado de saturaci√≥n (%)
        
        # === L√çMITES DE ATTERBERG ===
        'LL': 45.0,                       # L√≠mite l√≠quido (%)
        'LP': 25.0,                       # L√≠mite pl√°stico (%)
        'IP': 20.0,                       # √çndice pl√°stico (%)
        'LI': 0.0,                        # √çndice de liquidez
        'IC': 1.0,                        # √çndice de consistencia
        
        # === ENSAYOS DE CAMPO ===
        'N_SPT': 15,                      # Valor N del ensayo SPT (golpes/pie)
        'qc_CPT': 5000.0,                 # Resistencia de cono CPT (kPa)
        'fs_CPT': 100.0,                  # Resistencia por fricci√≥n CPT (kPa)
        'Vs': 200.0,                      # Velocidad de ondas de corte (m/s)
        'Vp': 500.0,                      # Velocidad de ondas primarias (m/s)
        
        # === PROPIEDADES HIDR√ÅULICAS ===
        'k': 1e-5,                        # Coeficiente de permeabilidad (m/s)
        'k_h': 1e-5,                      # Permeabilidad horizontal (m/s)
        'k_v': 1e-5,                      # Permeabilidad vertical (m/s)
        'nivel_freatico': 2.0,            # Profundidad nivel fre√°tico (m)
        'presion_poros': 0.0,             # Presi√≥n de poros (kPa)
        
        # === COMPRESIBILIDAD Y CONSOLIDACI√ìN ===
        'Cc': 0.25,                       # √çndice de compresi√≥n
        'Cs': 0.05,                       # √çndice de expansi√≥n
        'Cr': 0.03,                       # √çndice de recompresi√≥n
        'sigma_p': 100.0,                 # Presi√≥n de preconsolidaci√≥n (kPa)
        'OCR': 1.5,                       # Raz√≥n de sobreconsolidaci√≥n
        't90': 2.0,                       # Tiempo para 90% consolidaci√≥n (a√±os)
        
        # === CLASIFICACI√ìN SUCS ===
        'sucs_grupo': 'SM',               # Grupo SUCS
        'sucs_subgrupo': 'Sandy SILT',    # Subgrupo SUCS
        'aashto_grupo': 'A-2-4',          # Grupo AASHTO
        'aashto_gi': 4,                   # √çndice de grupo AASHTO
        
        # === CAPACIDAD PORTANTE Y ASENTAMIENTOS ===
        'q_adm': 150.0,                   # Capacidad portante admisible (kPa)
        'q_ult': 375.0,                   # Capacidad portante √∫ltima (kPa)
        'asent_elastico': 0.015,          # Asentamiento el√°stico (m)
        'asent_consolidacion': 0.035,     # Asentamiento por consolidaci√≥n (m)
        'asent_total': 0.050,             # Asentamiento total (m)
        
        # === PAR√ÅMETROS S√çSMICOS ===
        'Gmax': 50000.0,                  # M√≥dulo de corte m√°ximo (kPa)
        'D50': 0.2,                       # Tama√±o efectivo de part√≠cula (mm)
        'FC': 15.0,                       # Contenido de finos (%)
        'rd': 0.95,                       # Factor de reducci√≥n de esfuerzos
        'MSF': 1.0,                       # Factor de escala de magnitud
        
        # === PROPIEDADES QU√çMICAS ===
        'pH': 7.0,                        # pH del suelo
        'sulfatos': 0.1,                  # Contenido de sulfatos (%)
        'materia_organica': 1.5,          # Contenido de materia org√°nica (%)
        'carbonatos': 5.0,                # Contenido de carbonatos (%)
        
        # === PAR√ÅMETROS DE COMPACTACI√ìN ===
        'w_optima': 16.0,                 # Contenido de humedad √≥ptimo (%)
        'gamma_max': 19.5,                # Peso unitario m√°ximo (kN/m¬≥)
        'RC': 95.0,                       # Grado de compactaci√≥n (%)
    }
    
    for key, value in parametros_base.items():
        if key not in st.session_state:
            st.session_state[key] = value

inicializar_parametros()

# FUNCIONES DE CLASIFICACI√ìN MEJORADAS
def clasificar_suelo_spt(N):
    """Clasificaci√≥n de densidad/consistencia basada en N-SPT"""
    if N < 2: return "Muy suelto / Muy blando"
    elif N < 4: return "Suelto / Blando"
    elif N < 8: return "Medio suelto / Medio blando"
    elif N < 15: return "Medio / Firme"
    elif N < 30: return "Medio denso / Muy firme"
    elif N < 50: return "Denso / R√≠gido"
    else: return "Muy denso / Muy r√≠gido"

def clasificar_por_permeabilidad(k):
    """Clasificaci√≥n seg√∫n coeficiente de permeabilidad"""
    if k > 1e-1: return "Alta - Gravas limpias"
    elif k > 1e-3: return "Media-Alta - Arenas gruesas"
    elif k > 1e-5: return "Media - Arenas finas, limos"
    elif k > 1e-7: return "Baja - Limos arcillosos"
    elif k > 1e-9: return "Muy baja - Arcillas"
    else: return "Impermeable - Arcillas muy pl√°sticas"

def clasificar_por_compresibilidad(Cc):
    """Clasificaci√≥n seg√∫n √≠ndice de compresi√≥n"""
    if Cc < 0.1: return "Baja compresibilidad"
    elif Cc < 0.3: return "Media compresibilidad"
    elif Cc < 0.5: return "Alta compresibilidad"
    else: return "Muy alta compresibilidad"

def estimar_phi_por_spt(N):
    """Estimar √°ngulo de fricci√≥n a partir de N-SPT (para arenas)"""
    if N < 4: return 28
    elif N < 10: return 30
    elif N < 30: return 32
    elif N < 50: return 35
    else: return 38

def estimar_cu_por_spt(N):
    """Estimar cohesi√≥n no drenada a partir de N-SPT (para arcillas)"""
    return N * 5.0  # Aproximaci√≥n com√∫n: cu (kPa) ‚âà 5 * N

def clasificar_por_atterberg(LL, IP):
    """Clasificaci√≥n seg√∫n carta de plasticidad"""
    if IP < 4: return "No pl√°stico"
    elif IP < 7: return "Baja plasticidad"
    elif IP < 15: return "Media plasticidad"
    elif IP < 30: return "Alta plasticidad"
    else: return "Muy alta plasticidad"

# INTERFAZ PRINCIPAL MEJORADA
st.title("üèóÔ∏è PAR√ÅMETROS GEOT√âCNICOS COMPLETOS")
st.markdown("### Sistema integrado de par√°metros para an√°lisis geot√©cnico avanzado")

# PESTA√ëAS PRINCIPALES MEJORADAS
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üß± PROPIEDADES B√ÅSICAS", 
    "üìä ENSAYOS Y CLASIFICACI√ìN", 
    "üíß HIDR√ÅULICA Y CONSOLIDACI√ìN",
    "‚ö° PROPIEDADES AVANZADAS",
    "üìã RESUMEN Y EXPORTACI√ìN"
])

with tab1:
    st.header("Propiedades Fundamentales del Suelo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîπ Resistencia al Corte")
        st.session_state.c = st.number_input("Cohesi√≥n drenada c (kPa)", 
                                           value=st.session_state.c, 
                                           min_value=0.0, max_value=500.0, step=5.0,
                                           help="Cohesi√≥n efectiva para condiciones drenadas")
        
        st.session_state.phi = st.number_input("√Ångulo de fricci√≥n œÜ (¬∞)", 
                                             value=st.session_state.phi, 
                                             min_value=0.0, max_value=45.0, step=1.0,
                                             help="√Ångulo de fricci√≥n interna")
        
        st.session_state.cu = st.number_input("Resistencia no drenada c_u (kPa)", 
                                            value=st.session_state.cu, 
                                            min_value=0.0, max_value=300.0, step=5.0,
                                            help="Cohesi√≥n no drenada para an√°lisis a corto plazo")
        
        st.session_state.su = st.number_input("Resistencia corte no drenado s_u (kPa)", 
                                            value=st.session_state.su, 
                                            min_value=0.0, max_value=500.0, step=10.0)
        
        st.subheader("üîπ Pesos Unitarios")
        st.session_state.gamma = st.number_input("Peso unitario natural Œ≥ (kN/m¬≥)", 
                                               value=st.session_state.gamma, 
                                               min_value=10.0, max_value=25.0, step=0.5,
                                               help="Peso unitario en condiciones naturales")
        
        st.session_state.gamma_sat = st.number_input("Peso unitario saturado Œ≥_sat (kN/m¬≥)", 
                                                   value=st.session_state.gamma_sat, 
                                                   min_value=15.0, max_value=23.0, step=0.5)
        
        st.session_state.gamma_d = st.number_input("Peso unitario seco Œ≥_d (kN/m¬≥)", 
                                                 value=st.session_state.gamma_d, 
                                                 min_value=12.0, max_value=22.0, step=0.5)
    
    with col2:
        st.subheader("üîπ Deformabilidad")
        st.session_state.Es = st.number_input("M√≥dulo elasticidad E_s (kPa)", 
                                            value=st.session_state.Es, 
                                            min_value=1000.0, max_value=200000.0, step=1000.0,
                                            help="M√≥dulo de Young del suelo para condiciones drenadas")
        
        st.session_state.Eu = st.number_input("M√≥dulo no drenado E_u (kPa)", 
                                            value=st.session_state.Eu, 
                                            min_value=500.0, max_value=100000.0, step=1000.0)
        
        st.session_state.nu = st.number_input("Coeficiente de Poisson ŒΩ", 
                                            value=st.session_state.nu, 
                                            min_value=0.1, max_value=0.5, step=0.05,
                                            help="Rango t√≠pico: 0.2-0.35 para arenas, 0.4-0.5 para arcillas saturadas")
        
        st.session_state.Gmax = st.number_input("M√≥dulo corte m√°ximo G_max (kPa)", 
                                              value=st.session_state.Gmax, 
                                              min_value=1000.0, max_value=300000.0, step=5000.0)
        
        st.subheader("üîπ Propiedades √çndice")
        st.session_state.Gs = st.number_input("Gravedad espec√≠fica G_s", 
                                            value=st.session_state.Gs, 
                                            min_value=2.4, max_value=2.8, step=0.01,
                                            help="Rango t√≠pico: 2.65-2.67 para arenas, 2.70-2.75 para arcillas")
        
        st.session_state.e = st.number_input("Relaci√≥n de vac√≠os e", 
                                           value=st.session_state.e, 
                                           min_value=0.3, max_value=2.0, step=0.05)
        
        st.session_state.n = st.number_input("Porosidad n", 
                                           value=st.session_state.n, 
                                           min_value=0.2, max_value=0.8, step=0.01)

with tab2:
    st.header("Ensayos de Campo y Clasificaci√≥n")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîπ Ensayos de Penetraci√≥n")
        st.session_state.N_SPT = st.number_input("Valor N-SPT (golpes/pie)", 
                                               value=st.session_state.N_SPT, 
                                               min_value=0, max_value=100, step=1,
                                               help="Standard Penetration Test - Golpes para 30 cm de penetraci√≥n")
        
        # Mostrar clasificaci√≥n autom√°tica
        clasif_spt = clasificar_suelo_spt(st.session_state.N_SPT)
        st.metric("Clasificaci√≥n por N-SPT", clasif_spt)
        
        # Estimaciones autom√°ticas
        if st.checkbox("Estimar par√°metros desde N-SPT"):
            phi_estimado = estimar_phi_por_spt(st.session_state.N_SPT)
            cu_estimado = estimar_cu_por_spt(st.session_state.N_SPT)
            st.info(f"œÜ estimado: {phi_estimado}¬∞ | c_u estimado: {cu_estimado} kPa")
        
        st.session_state.qc_CPT = st.number_input("Resistencia de cono q_c (kPa) - CPT", 
                                                value=st.session_state.qc_CPT, 
                                                min_value=0.0, max_value=30000.0, step=500.0)
        
        st.session_state.fs_CPT = st.number_input("Resistencia por fricci√≥n f_s (kPa) - CPT", 
                                                value=st.session_state.fs_CPT, 
                                                min_value=0.0, max_value=300.0, step=10.0)
        
        st.session_state.Vs = st.number_input("Velocidad onda de corte V_s (m/s)", 
                                            value=st.session_state.Vs, 
                                            min_value=50.0, max_value=1000.0, step=25.0)
        
        st.session_state.Vp = st.number_input("Velocidad onda primaria V_p (m/s)", 
                                            value=st.session_state.Vp, 
                                            min_value=100.0, max_value=2000.0, step=50.0)
        
    with col2:
        st.subheader("üîπ L√≠mites de Atterberg")
        st.session_state.LL = st.number_input("L√≠mite l√≠quido LL (%)", 
                                            value=st.session_state.LL, 
                                            min_value=0.0, max_value=100.0, step=5.0)
        
        st.session_state.LP = st.number_input("L√≠mite pl√°stico LP (%)", 
                                            value=st.session_state.LP, 
                                            min_value=0.0, max_value=80.0, step=5.0)
        
        st.session_state.IP = st.number_input("√çndice pl√°stico IP (%)", 
                                            value=st.session_state.IP, 
                                            min_value=0.0, max_value=60.0, step=5.0)
        
        # Clasificaci√≥n por Atterberg
        if st.session_state.IP > 0:
            clasif_plasticidad = clasificar_por_atterberg(st.session_state.LL, st.session_state.IP)
            st.metric("Clasificaci√≥n por plasticidad", clasif_plasticidad)
        
        st.session_state.LI = st.number_input("√çndice de liquidez LI", 
                                            value=st.session_state.LI, 
                                            min_value=-1.0, max_value=2.0, step=0.1)
        
        st.session_state.IC = st.number_input("√çndice de consistencia IC", 
                                            value=st.session_state.IC, 
                                            min_value=0.0, max_value=2.0, step=0.1)
        
        st.subheader("üîπ Clasificaci√≥n SUCS/AASHTO")
        sucs_grupos = ['GW', 'GP', 'GM', 'GC', 'SW', 'SP', 'SM', 'SC', 'ML', 'CL', 'OL', 'MH', 'CH', 'OH', 'PT']
        st.session_state.sucs_grupo = st.selectbox("Grupo SUCS", sucs_grupos, 
                                                 index=sucs_grupos.index(st.session_state.sucs_grupo))
        
        aashto_grupos = ['A-1-a', 'A-1-b', 'A-2-4', 'A-2-5', 'A-2-6', 'A-2-7', 'A-3', 'A-4', 'A-5', 'A-6', 'A-7-5', 'A-7-6']
        st.session_state.aashto_grupo = st.selectbox("Grupo AASHTO", aashto_grupos, 
                                                   index=aashto_grupos.index(st.session_state.aashto_grupo))

with tab3:
    st.header("Hidr√°ulica y Consolidaci√≥n")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîπ Propiedades Hidr√°ulicas")
        st.session_state.k = st.number_input("Coeficiente de permeabilidad k (m/s)", 
                                           value=st.session_state.k, 
                                           format="%.2e", min_value=1e-9, max_value=1e-1, step=1e-6)
        
        # Clasificaci√≥n por permeabilidad
        clasif_k = clasificar_por_permeabilidad(st.session_state.k)
        st.metric("Clasificaci√≥n permeabilidad", clasif_k)
        
        st.session_state.k_h = st.number_input("Permeabilidad horizontal k_h (m/s)", 
                                             value=st.session_state.k_h, 
                                             format="%.2e", min_value=1e-9, max_value=1e-1, step=1e-6)
        
        st.session_state.k_v = st.number_input("Permeabilidad vertical k_v (m/s)", 
                                             value=st.session_state.k_v, 
                                             format="%.2e", min_value=1e-9, max_value=1e-1, step=1e-6)
        
        st.session_state.nivel_freatico = st.number_input("Nivel fre√°tico (m)", 
                                                        value=st.session_state.nivel_freatico, 
                                                        min_value=0.0, max_value=20.0, step=0.5)
        
        st.session_state.presion_poros = st.number_input("Presi√≥n de poros u (kPa)", 
                                                       value=st.session_state.presion_poros, 
                                                       min_value=0.0, max_value=500.0, step=10.0)
        
    with col2:
        st.subheader("üîπ Compresibilidad y Consolidaci√≥n")
        st.session_state.Cc = st.number_input("√çndice de compresi√≥n C_c", 
                                            value=st.session_state.Cc, 
                                            min_value=0.01, max_value=2.0, step=0.05)
        
        # Clasificaci√≥n por compresibilidad
        clasif_comp = clasificar_por_compresibilidad(st.session_state.Cc)
        st.metric("Clasificaci√≥n compresibilidad", clasif_comp)
        
        st.session_state.Cs = st.number_input("√çndice de expansi√≥n C_s", 
                                            value=st.session_state.Cs, 
                                            min_value=0.001, max_value=0.5, step=0.01)
        
        st.session_state.Cr = st.number_input("√çndice de recompresi√≥n C_r", 
                                            value=st.session_state.Cr, 
                                            min_value=0.001, max_value=0.3, step=0.01)
        
        st.session_state.sigma_p = st.number_input("Presi√≥n preconsolidaci√≥n œÉ'_p (kPa)", 
                                                 value=st.session_state.sigma_p, 
                                                 min_value=10.0, max_value=1000.0, step=25.0)
        
        # Calcular OCR autom√°ticamente
        sigma_vo = st.session_state.gamma * 5.0  # Suponiendo 5m de profundidad
        OCR = st.session_state.sigma_p / sigma_vo if sigma_vo > 0 else 1.0
        st.session_state.OCR = st.number_input("OCR (Raz√≥n sobreconsolidaci√≥n)", 
                                             value=OCR, min_value=1.0, max_value=10.0, step=0.1)
        
        st.session_state.Cv = st.number_input("Coeficiente consolidaci√≥n C_v (m¬≤/a√±o)", 
                                            value=st.session_state.Cv, 
                                            min_value=0.1, max_value=100.0, step=1.0)

with tab4:
    st.header("Propiedades Avanzadas y Especiales")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üîπ Propiedades S√≠smicas")
        st.session_state.rd = st.number_input("Factor reducci√≥n esfuerzos r_d", 
                                            value=st.session_state.rd, 
                                            min_value=0.5, max_value=1.2, step=0.05)
        
        st.session_state.MSF = st.number_input("Factor escala magnitud MSF", 
                                            value=st.session_state.MSF, 
                                            min_value=0.5, max_value=2.0, step=0.1)
        
        st.session_state.D50 = st.number_input("Tama√±o efectivo D‚ÇÖ‚ÇÄ (mm)", 
                                            value=st.session_state.D50, 
                                            min_value=0.001, max_value=10.0, step=0.1)
        
        st.session_state.FC = st.number_input("Contenido de finos FC (%)", 
                                           value=st.session_state.FC, 
                                           min_value=0.0, max_value=100.0, step=5.0)
        
        st.subheader("üîπ Propiedades de Compactaci√≥n")
        st.session_state.w_optima = st.number_input("Humedad √≥ptima w_opt (%)", 
                                                  value=st.session_state.w_optima, 
                                                  min_value=5.0, max_value=30.0, step=1.0)
        
        st.session_state.gamma_max = st.number_input("Peso unitario m√°ximo Œ≥_max (kN/m¬≥)", 
                                                   value=st.session_state.gamma_max, 
                                                   min_value=15.0, max_value=23.0, step=0.5)
        
        st.session_state.RC = st.number_input("Grado compactaci√≥n RC (%)", 
                                           value=st.session_state.RC, 
                                           min_value=80.0, max_value=105.0, step=1.0)
    
    with col2:
        st.subheader("üîπ Propiedades Qu√≠micas")
        st.session_state.pH = st.number_input("pH del suelo", 
                                            value=st.session_state.pH, 
                                            min_value=3.0, max_value=10.0, step=0.1)
        
        st.session_state.sulfatos = st.number_input("Contenido de sulfatos (%)", 
                                                  value=st.session_state.sulfatos, 
                                                  min_value=0.0, max_value=5.0, step=0.1)
        
        st.session_state.materia_organica = st.number_input("Materia org√°nica (%)", 
                                                          value=st.session_state.materia_organica, 
                                                          min_value=0.0, max_value=10.0, step=0.5)
        
        st.session_state.carbonatos = st.number_input("Carbonatos (%)", 
                                                    value=st.session_state.carbonatos, 
                                                    min_value=0.0, max_value=20.0, step=1.0)
        
        st.subheader("üîπ Capacidad Portante y Asentamientos")
        st.session_state.q_adm = st.number_input("Capacidad portante admisible q_adm (kPa)", 
                                               value=st.session_state.q_adm, 
                                               min_value=50.0, max_value=1000.0, step=25.0)
        
        st.session_state.q_ult = st.number_input("Capacidad portante √∫ltima q_ult (kPa)", 
                                               value=st.session_state.q_ult, 
                                               min_value=100.0, max_value=3000.0, step=50.0)
        
        st.session_state.asent_total = st.number_input("Asentamiento total esperado (m)", 
                                                     value=st.session_state.asent_total, 
                                                     min_value=0.001, max_value=0.200, step=0.005)

with tab5:
    st.header("Resumen y Exportaci√≥n de Par√°metros")
    
    # Crear DataFrame de resumen completo
    categorias = {
        'RESISTENCIA': ['c', 'phi', 'cu', 'su'],
        'DEFORMABILIDAD': ['Es', 'Eu', 'nu', 'Gmax'],
        'PESOS UNITARIOS': ['gamma', 'gamma_sat', 'gamma_d'],
        'PROPIEDADES √çNDICE': ['Gs', 'e', 'n', 'w', 'Sr'],
        'ATTERBERG': ['LL', 'LP', 'IP', 'LI', 'IC'],
        'ENSAYOS CAMPO': ['N_SPT', 'qc_CPT', 'fs_CPT', 'Vs', 'Vp'],
        'HIDR√ÅULICA': ['k', 'k_h', 'k_v', 'nivel_freatico'],
        'CONSOLIDACI√ìN': ['Cc', 'Cs', 'Cr', 'sigma_p', 'OCR', 'Cv'],
        'CLASIFICACI√ìN': ['sucs_grupo', 'aashto_grupo'],
        'CAPACIDAD PORTANTE': ['q_adm', 'q_ult'],
        'S√çSMICA': ['D50', 'FC', 'rd', 'MSF'],
        'QU√çMICAS': ['pH', 'sulfatos', 'materia_organica', 'carbonatos']
    }
    
    # Mostrar resumen por categor√≠as
    for categoria, parametros in categorias.items():
        with st.expander(f"üìÅ {categoria}"):
            datos_categoria = []
            for param in parametros:
                if param in st.session_state:
                    valor = st.session_state[param]
                    unidad = obtener_unidad(param)
                    datos_categoria.append([param, valor, unidad])
            
            if datos_categoria:
                df_cat = pd.DataFrame(datos_categoria, columns=['Par√°metro', 'Valor', 'Unidad'])
                st.dataframe(df_cat, use_container_width=True, hide_index=True)
    
    # Botones de exportaci√≥n
    st.subheader("üì§ Exportar Datos")
    
    col_btn1, col_btn2, col_btn3 = st.columns(3)
    
    with col_btn1:
        if st.button("üíæ Guardar Par√°metros Actuales", use_container_width=True):
            # Crear DataFrame completo
            todos_parametros = {key: st.session_state[key] for key in st.session_state.keys() 
                               if not key.startswith('_') and not callable(st.session_state[key])}
            df_completo = pd.DataFrame.from_dict(todos_parametros, orient='index', columns=['Valor'])
            df_completo['Unidad'] = df_completo.index.map(obtener_unidad)
            df_completo.index.name = 'Par√°metro'
            
            st.success("Par√°metros guardados en sesi√≥n")

def obtener_unidad(parametro):
    """Funci√≥n auxiliar para obtener unidades de cada par√°metro"""
    unidades = {
        'gamma': 'kN/m¬≥', 'gamma_sat': 'kN/m¬≥', 'gamma_d': 'kN/m¬≥', 'gamma_max': 'kN/m¬≥',
        'c': 'kPa', 'phi': '¬∞', 'cu': 'kPa', 'su': 'kPa',
        'Es': 'kPa', 'Eu': 'kPa', 'Gmax': 'kPa', 'q_adm': 'kPa', 'q_ult': 'kPa',
        'sigma_p': 'kPa', 'presion_poros': 'kPa',
        'w': '%', 'w_sat': '%', 'w_optima': '%', 'Sr': '%', 'RC': '%',
        'LL': '%', 'LP': '%', 'IP': '%',
        'qc_CPT': 'kPa', 'fs_CPT': 'kPa',
        'Vs': 'm/s', 'Vp': 'm/s',
        'k': 'm/s', 'k_h': 'm/s', 'k_v': 'm/s',
        'Cv': 'm¬≤/a√±o', 't90': 'a√±os',
        'D50': 'mm', 'FC': '%',
        'sulfatos': '%', 'materia_organica': '%', 'carbonatos': '%',
        'asent_total': 'm', 'asent_elastico': 'm', 'asent_consolidacion': 'm'
    }
    return unidades.get(parametro, '-')

# INFORMACI√ìN DE REFERENCIA MEJORADA
with st.expander("üìö RANGOS T√çPICOS DE REFERENCIA"):
    st.markdown("""
    ### **Arenas:**
    - œÜ: 28¬∞-42¬∞ | c: 0-10 kPa | Œ≥: 16-20 kN/m¬≥ | E_s: 10,000-80,000 kPa
    - N-SPT: 10-50 | Permeabilidad: 10‚Åª¬π-10‚Åª¬≥ m/s
    
    ### **Arcillas:**
    - œÜ: 0¬∞-25¬∞ | c: 5-200 kPa | Œ≥: 16-21 kN/m¬≥ | E_s: 2,000-50,000 kPa  
    - N-SPT: 2-15 | Permeabilidad: 10‚Åª‚Å∑-10‚Åª¬π¬π m/s
    
    ### **Limos:**
    - œÜ: 25¬∞-35¬∞ | c: 0-25 kPa | Œ≥: 17-20 kN/m¬≥ | E_s: 5,000-30,000 kPa
    - N-SPT: 5-20 | Permeabilidad: 10‚Åª‚Åµ-10‚Åª‚Å∏ m/s
    
    ### **Clasificaci√≥n N-SPT:**
    - 0-4: Muy suelto/blando
    - 4-10: Suelto/blando  
    - 10-30: Medio/firme
    - 30-50: Denso/r√≠gido
    - >50: Muy denso/muy r√≠gido
    """)

st.success("‚úÖ Sistema de par√°metros geot√©cnicos completos configurado correctamente")
# INTERFAZ PRINCIPAL
st.title("üèóÔ∏è PAR√ÅMETROS GEOT√âCNICOS")
st.markdown("### Par√°metros esenciales para an√°lisis geot√©cnico")

# FUNCIONES AUXILIARES
def clasificar_suelo_spt(N):
    if N < 4: return "Muy suelto/Blando"
    elif N < 10: return "Suelto"
    elif N < 30: return "Medio"
    elif N < 50: return "Denso"
    else: return "Muy denso"

def clasificar_permeabilidad(k):
    if k > 1e-1: return "Alta - Gravas"
    elif k > 1e-3: return "Media - Arenas"
    elif k > 1e-5: return "Baja - Limos"
    else: return "Muy baja - Arcillas"

# PESTA√ëAS PRINCIPALES
tab1, tab2, tab3 = st.tabs(["üß± PROPIEDADES B√ÅSICAS", "üìä ENSAYOS Y CLASIFICACI√ìN", "‚ö° PROPIEDADES AVANZADAS"])

with tab1:
    st.header("Propiedades Fundamentales del Suelo")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Resistencia al Corte")
        st.session_state.c = st.number_input("Cohesi√≥n c (kPa)", 
                                           value=st.session_state.c, min_value=0.0, max_value=500.0, step=5.0)
        st.session_state.phi = st.number_input("√Ångulo de fricci√≥n œÜ (¬∞)", 
                                             value=st.session_state.phi, min_value=0.0, max_value=45.0, step=1.0)
        st.session_state.cu = st.number_input("Resistencia no drenada c_u (kPa)", 
                                            value=st.session_state.cu, min_value=0.0, max_value=300.0, step=5.0)
        
        st.subheader("Pesos Unitarios")
        st.session_state.gamma = st.number_input("Peso unitario Œ≥ (kN/m¬≥)", 
                                               value=st.session_state.gamma, min_value=10.0, max_value=25.0, step=0.5)
        st.session_state.gamma_sat = st.number_input("Peso unitario saturado Œ≥_sat (kN/m¬≥)", 
                                                   value=st.session_state.gamma_sat, min_value=15.0, max_value=23.0, step=0.5)
    
    with col2:
        st.subheader("Deformabilidad")
        st.session_state.Es = st.number_input("M√≥dulo elasticidad E_s (kPa)", 
                                            value=st.session_state.Es, min_value=1000.0, max_value=200000.0, step=1000.0)
        st.session_state.nu = st.number_input("Coeficiente de Poisson ŒΩ", 
                                            value=st.session_state.nu, min_value=0.1, max_value=0.5, step=0.05)
        st.session_state.q_adm = st.number_input("Capacidad portante admisible q_adm (kPa)", 
                                               value=st.session_state.q_adm, min_value=50.0, max_value=1000.0, step=25.0)
        
        st.subheader("Hidrogeolog√≠a")
        st.session_state.nivel_freatico = st.number_input("Nivel fre√°tico (m)", 
                                                        value=st.session_state.nivel_freatico, min_value=0.0, max_value=20.0, step=0.5)

with tab2:
    st.header("Ensayos de Campo y Clasificaci√≥n")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Ensayos de Penetraci√≥n")
        st.session_state.N_SPT = st.number_input("Valor N-SPT (golpes/pie)", 
                                               value=st.session_state.N_SPT, min_value=0, max_value=100, step=1)
        st.session_state.qc_CPT = st.number_input("Resistencia cono q_c (kPa) - CPT", 
                                                value=st.session_state.qc_CPT, min_value=0.0, max_value=30000.0, step=500.0)
        st.session_state.Vs = st.number_input("Velocidad onda de corte V_s (m/s)", 
                                            value=st.session_state.Vs, min_value=50.0, max_value=1000.0, step=25.0)
        
        # Mostrar clasificaciones
        st.metric("Clasificaci√≥n por N-SPT", clasificar_suelo_spt(st.session_state.N_SPT))
        
    with col2:
        st.subheader("Propiedades √çndice")
        st.session_state.w = st.number_input("Contenido humedad w (%)", 
                                           value=st.session_state.w, min_value=0.0, max_value=100.0, step=1.0)
        st.session_state.Gs = st.number_input("Gravedad espec√≠fica G_s", 
                                            value=st.session_state.Gs, min_value=2.4, max_value=2.8, step=0.01)
        st.session_state.e = st.number_input("Relaci√≥n de vac√≠os e", 
                                           value=st.session_state.e, min_value=0.3, max_value=1.5, step=0.05)
        
        st.subheader("L√≠mites de Atterberg")
        st.session_state.LL = st.number_input("L√≠mite l√≠quido LL (%)", 
                                            value=st.session_state.LL, min_value=0.0, max_value=100.0, step=5.0)
        st.session_state.LP = st.number_input("L√≠mite pl√°stico LP (%)", 
                                            value=st.session_state.LP, min_value=0.0, max_value=80.0, step=5.0)
        st.session_state.IP = st.number_input("√çndice pl√°stico IP (%)", 
                                            value=st.session_state.IP, min_value=0.0, max_value=60.0, step=5.0)

with tab3:
    st.header("Propiedades Avanzadas")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("Compresibilidad")
        st.session_state.Cc = st.number_input("√çndice compresi√≥n C_c", 
                                            value=st.session_state.Cc, min_value=0.01, max_value=1.0, step=0.05)
        st.session_state.sigma_p = st.number_input("Presi√≥n preconsolidaci√≥n œÉ'p (kPa)", 
                                                 value=st.session_state.sigma_p, min_value=10.0, max_value=1000.0, step=25.0)
        
        # Calcular OCR
        sigma_vo = st.session_state.gamma * 5.0  # Suponiendo 5m de profundidad
        OCR = st.session_state.sigma_p / sigma_vo if sigma_vo > 0 else 1.0
        st.metric("OCR (Raz√≥n sobreconsolidaci√≥n)", f"{OCR:.2f}")
        
        st.subheader("Clasificaci√≥n SUCS")
        sucs_grupos = ['GW', 'GP', 'GM', 'GC', 'SW', 'SP', 'SM', 'SC', 'ML', 'CL', 'OL', 'MH', 'CH', 'OH', 'PT']
        st.session_state.sucs_grupo = st.selectbox("Grupo SUCS", sucs_grupos, index=sucs_grupos.index(st.session_state.sucs_grupo))
    
    with col2:
        st.subheader("Resistencia Avanzada")
        st.session_state.su = st.number_input("Resistencia corte no drenado s_u (kPa)", 
                                            value=st.session_state.su, min_value=0.0, max_value=500.0, step=10.0)
        
        st.subheader("Permeabilidad")
        k_value = st.number_input("Permeabilidad k (cm/s)", value=1e-5, format="%.2e", min_value=1e-9, max_value=1e-1, step=1e-6)
        st.metric("Clasificaci√≥n permeabilidad", clasificar_permeabilidad(k_value))

# RESUMEN Y EXPORTACI√ìN
st.markdown("---")
st.header("üìã RESUMEN DE PAR√ÅMETROS")

# Crear DataFrame de resumen
resumen_data = {
    'Par√°metro': [
        'Cohesi√≥n c (kPa)', '√Ångulo fricci√≥n œÜ (¬∞)', 'Peso unitario Œ≥ (kN/m¬≥)',
        'M√≥dulo elasticidad E_s (kPa)', 'Capacidad portante q_adm (kPa)',
        'N-SPT (golpes/pie)', 'Resistencia cono q_c (kPa)', 'Velocidad V_s (m/s)',
        'Contenido humedad w (%)', '√çndice pl√°stico IP (%)', 'Grupo SUCS'
    ],
    'Valor': [
        st.session_state.c, st.session_state.phi, st.session_state.gamma,
        st.session_state.Es, st.session_state.q_adm,
        st.session_state.N_SPT, st.session_state.qc_CPT, st.session_state.Vs,
        st.session_state.w, st.session_state.IP, st.session_state.sucs_grupo
    ]
}

df_resumen = pd.DataFrame(resumen_data)
st.dataframe(df_resumen, use_container_width=True, hide_index=True)

# Botones de acci√≥n
col_btn1, col_btn2 = st.columns(2)

with col_btn1:
    if st.button("üíæ Guardar Par√°metros", use_container_width=True):
        # Crear DataFrame completo
        todos_parametros = {key: st.session_state[key] for key in st.session_state.keys() 
                           if not key.startswith('_') and not callable(st.session_state[key])}
        df_completo = pd.DataFrame.from_dict(todos_parametros, orient='index', columns=['Valor'])
        df_completo.index.name = 'Par√°metro'
        
        # Convertir a CSV
        csv = df_completo.to_csv()
        st.download_button(
            label="üì• Descargar CSV",
            data=csv,
            file_name="parametros_geotecnicos.csv",
            mime="text/csv",
            use_container_width=True
        )

with col_btn2:
    if st.button("üîÑ Restablecer Valores", use_container_width=True):
        for key in st.session_state.keys():
            if not key.startswith('_') and not callable(st.session_state[key]):
                del st.session_state[key]
        st.rerun()

# INFORMACI√ìN DE REFERENCIA
with st.expander("üìö Rangos T√≠picos de Referencia"):
    st.markdown("""
    **Arenas:**
    - œÜ: 28¬∞-42¬∞ | c: 0 kPa | Œ≥: 16-20 kN/m¬≥ | E_s: 10,000-80,000 kPa
    
    **Arcillas:**
    - œÜ: 0¬∞-25¬∞ | c: 5-200 kPa | Œ≥: 16-21 kN/m¬≥ | E_s: 2,000-50,000 kPa
    
    **Clasificaci√≥n N-SPT:**
    - 0-4: Muy suelto/blando
    - 4-10: Suelto  
    - 10-30: Medio
    - 30-50: Denso
    - >50: Muy denso
    """)

st.success("‚úÖ Par√°metros geot√©cnicos configurados correctamente")

#--------------------------------------------------
# ---------- Factores capacidad portante ----------
def Nq(phi):  return math.e ** (math.pi * math.tan(phi)) * math.tan(math.radians(45)+phi/2) ** 2
def Nc(phi):  return (Nq(phi) - 1) / math.tan(phi) if phi > 1e-6 else 5.14
def Ng(phi):  return 2 * (Nq(phi) + 1) * math.tan(phi)

def factors(modelo, phi_deg):
    phi = math.radians(phi_deg)
    if "Terzaghi" in modelo:   sc, sq, sŒ≥ = 1.3, 1.2, 0.8
    elif "Meyerhof" in modelo: sc, sq, sŒ≥ = 1.3, 1.2, 1.0
    elif "Hansen" in modelo:   sc, sq, sŒ≥ = 1.0, 1.0, 1.0
    else:                      sc, sq, sŒ≥ = 1.0, 1.0, 1.0
    return Nc(phi), Nq(phi), Ng(phi), sc, sq, sŒ≥

def qult(modelo, gamma, c, phi, B, D):
    Nc_, Nq_, Ng_, sc, sq, sŒ≥ = factors(modelo, phi)
    q = gamma * D
    return c*Nc_*sc + q*Nq_*sq + 0.5*gamma*B*Ng_*sŒ≥

def qult_corr(modelo, gamma, c, phi, B, D, nivel_freatico):
    if D < nivel_freatico:
        gamma_eff = gamma * 0.5
    else:
        gamma_eff = gamma
    return qult(modelo, gamma_eff, c, phi, B, D)

# ---------- Funciones de c√°lculo ----------
def qreq(N, Mx, My, B, L):
    e_x, e_y = (Mx/N if N>0 else 0), (My/N if N>0 else 0)
    A = B*L
    sigma_avg = N/A
    sigma_max = sigma_avg*(1 + 6*e_x/B + 6*e_y/L)
    return sigma_max

def costo_total(B,L,h,concreto_Sm3,acero_Skg,excav_Sm3,D):
    vol = B*L*h
    acero_kg = 60*vol
    excav = B*L*D
    return (vol*concreto_Sm3) + (acero_kg*acero_Skg) + (excav*excav_Sm3)

def eval_tripleta(B,L,h):
    q_req = qreq(st.session_state.N, st.session_state.Mx, st.session_state.My, B, L)
    q_adm = qult_corr(st.session_state.modelo, st.session_state.gamma, st.session_state.c,
                      st.session_state.phi, B, st.session_state.D, st.session_state.nivel_freatico) / st.session_state.FS
    cumple = q_adm >= q_req
    costo = costo_total(B,L,h, st.session_state.concreto_Sm3, st.session_state.acero_Skg,
                        st.session_state.excav_Sm3, st.session_state.D)
    return q_req, q_adm, cumple, costo

# ---------- Entradas ----------
st.title("Optimizaci√≥n de Cimentaciones Superficiales")

st.markdown("## Propiedades del suelo")
colS1, colS2, colS3 = st.columns(3)
with colS1:
    st.session_state.gamma = st.number_input("Œ≥ (kN/m¬≥)", value=st.session_state.gamma)
    st.session_state.c = st.number_input("Cohesi√≥n c (kPa)", value=st.session_state.c)
with colS2:
    st.session_state.phi = st.number_input("œÜ (¬∞)", value=st.session_state.phi)
    st.session_state.Es = st.number_input("M√≥dulo E‚Çõ (kPa)", value=st.session_state.Es)
with colS3:
    st.session_state.nu = st.number_input("ŒΩ (Poisson)", value=st.session_state.nu, step=0.05)
    st.session_state.nivel_freatico = st.number_input("Nivel fre√°tico (m)", value=st.session_state.nivel_freatico)

st.markdown("## Cargas")
colC1, colC2, colC3 = st.columns(3)
with colC1: st.session_state.N = st.number_input("Carga axial N (kN)", value=st.session_state.N)
with colC2: st.session_state.Mx = st.number_input("Momento Mx (kN¬∑m)", value=st.session_state.Mx)
with colC3: st.session_state.My = st.number_input("Momento My (kN¬∑m)", value=st.session_state.My)

st.markdown("## Materiales cimentaci√≥n")
colM1, colM2, colM3 = st.columns(3)
with colM1: st.session_state.fc = st.number_input("f'c (MPa)", value=st.session_state.fc)
with colM2: st.session_state.fy = st.number_input("fy (MPa)", value=st.session_state.fy)
with colM3: st.session_state.recubrimiento = st.number_input("Recubrimiento (m)", value=st.session_state.recubrimiento)

st.markdown("## Factores y l√≠mites")
colF1, colF2 = st.columns(2)
with colF1: st.session_state.FS = st.number_input("FS (capacidad)", value=st.session_state.FS)
with colF2: st.session_state.asent_max = st.number_input("Asentamiento m√°ximo (m)", value=st.session_state.asent_max)

st.markdown("## Costos unitarios")
colCU1, colCU2, colCU3 = st.columns(3)
with colCU1: st.session_state.concreto_Sm3 = st.number_input("Concreto S/ m¬≥", value=st.session_state.concreto_Sm3)
with colCU2: st.session_state.acero_Skg = st.number_input("Acero S/ kg", value=st.session_state.acero_Skg)
with colCU3: st.session_state.excav_Sm3 = st.number_input("Excavaci√≥n S/ m¬≥", value=st.session_state.excav_Sm3)

# ---------- Rango dise√±o ----------
st.markdown("## Rangos de dise√±o")
r1, r2, r3 = st.columns(3)
with r1: st.session_state.B_min, st.session_state.B_max = st.slider("Base B (m)", 0.5, 6.0, (st.session_state.B_min, st.session_state.B_max))
with r2: st.session_state.L_min, st.session_state.L_max = st.slider("Largo L (m)", 0.5, 6.0, (st.session_state.L_min, st.session_state.L_max))
with r3: st.session_state.h_min, st.session_state.h_max = st.slider("Altura h (m)", 0.3, 2.0, (st.session_state.h_min, st.session_state.h_max))

# ---------- Bot√≥n ----------
if st.button("üîé Analizar soluciones"):
    Bs = np.linspace(st.session_state.B_min, st.session_state.B_max, st.session_state.nB)
    Ls = np.linspace(st.session_state.L_min, st.session_state.L_max, st.session_state.nL)
    hs = np.linspace(st.session_state.h_min, st.session_state.h_max, st.session_state.nh)
    rows=[]
    for B in Bs:
        for L in Ls:
            for h in hs:
                q_req, q_adm, ok, costo = eval_tripleta(B,L,h)
                if ok:
                    rows.append([B,L,h,q_req,q_adm,costo])
    if not rows:
        st.error("‚ö†Ô∏è No se encontraron soluciones que cumplan capacidad portante.")
    else:
        df = pd.DataFrame(rows, columns=["B","L","h","q_req","q_adm","costo"]).sort_values("costo")
        st.dataframe(df.head(10), use_container_width=True)
        mejor = df.iloc[0]
        st.success(f"Mejor: B={mejor.B:.2f} m, L={mejor.L:.2f} m, h={mejor.h:.2f} m, Costo S/ {mejor.costo:.2f}")
        fig = px.scatter(df, x="B", y="L", color="costo", size="h", title="Soluciones v√°lidas")
        st.plotly_chart(fig, use_container_width=True)




